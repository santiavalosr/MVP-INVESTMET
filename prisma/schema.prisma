// ──────────────────────────────────────────────────────────────────────────────
// Prisma config
// ──────────────────────────────────────────────────────────────────────────────
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String    @id // si quieres que Prisma lo genere: @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  @@index([userId])
}

// ──────────────────────────────────────────────────────────────────────────────
// Enums
// ──────────────────────────────────────────────────────────────────────────────
enum RiskTolerance {
  CONSERVATIVE
  MODERATE
  AGGRESSIVE
}

enum Periodicity {
  DAILY
  WEEKLY
  MONTHLY
}

enum Currency {
  USD
  MXN
  EUR
}

enum AssetType {
  EQUITY
  CRYPTO
  INDEX
}

// ──────────────────────────────────────────────────────────────────────────────
// Core: usuarios y perfil
// ──────────────────────────────────────────────────────────────────────────────
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile         Profile?
  goals           Goal[]
  contributions   Contribution[]
  watchlist       WatchlistItem[]
  notes           Note[]
  portfolios      Portfolio[]
  digests         DigestSubscription[]
  recommendations Recommendation[]
  snapshots       PriceSnapshot[]

  sessions Session[] // <-- AGREGA ESTO

  @@index([email])
}

model Profile {
  id            String        @id @default(cuid())
  userId        String        @unique
  firstName     String?
  lastName      String?
  country       String?
  baseCurrency  Currency      @default(USD)
  birthYear     Int?
  riskTolerance RiskTolerance @default(MODERATE)
  monthlyBudget Decimal?
  targetYears   Int?

  user User @relation(fields: [userId], references: [id])
}

// ──────────────────────────────────────────────────────────────────────────────
// Metas y aportaciones
// ──────────────────────────────────────────────────────────────────────────────
model Goal {
  id           String   @id @default(cuid())
  userId       String
  name         String
  targetAmount Decimal
  targetDate   DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, targetDate])
}

model Contribution {
  id     String   @id @default(cuid())
  userId String
  amount Decimal
  date   DateTime @default(now())
  note   String?

  user User @relation(fields: [userId], references: [id])

  @@index([userId, date])
}

// ──────────────────────────────────────────────────────────────────────────────
// Watchlist y notas
// ──────────────────────────────────────────────────────────────────────────────
model WatchlistItem {
  id        String    @id @default(cuid())
  userId    String
  symbol    String
  type      AssetType @default(EQUITY)
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, symbol, type])
  @@index([symbol])
}

model Note {
  id        String   @id @default(cuid())
  userId    String
  symbol    String
  content   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, symbol, createdAt])
}

// ──────────────────────────────────────────────────────────────────────────────
// Portafolio y posiciones
// ──────────────────────────────────────────────────────────────────────────────
model Portfolio {
  id        String   @id @default(cuid())
  userId    String
  name      String   @default("Default")
  createdAt DateTime @default(now())

  user      User       @relation(fields: [userId], references: [id])
  positions Position[]
}

model Position {
  id          String   @id @default(cuid())
  portfolioId String
  symbol      String
  quantity    Decimal
  avgPrice    Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id])

  @@index([portfolioId, symbol])
}

// ──────────────────────────────────────────────────────────────────────────────
// Snapshots de precio
// ──────────────────────────────────────────────────────────────────────────────
model PriceSnapshot {
  id        String   @id @default(cuid())
  userId    String
  symbol    String
  price     Decimal
  asOf      DateTime
  source    String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, symbol, asOf])
}

// ──────────────────────────────────────────────────────────────────────────────
// Recomendaciones / one-pagers (IA)
// ──────────────────────────────────────────────────────────────────────────────
model Recommendation {
  id     String @id @default(cuid())
  userId String
  symbol String

  intrinsic  Decimal?
  buyBelow   Decimal?
  sellAbove  Decimal?
  confidence Int?
  summaryMd  String?
  runDate    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, runDate])
  @@index([userId, symbol, runDate])
}

// ──────────────────────────────────────────────────────────────────────────────
// Suscripción al digest
// ──────────────────────────────────────────────────────────────────────────────
model DigestSubscription {
  id          String      @id @default(cuid())
  userId      String      @unique
  active      Boolean     @default(true)
  periodicity Periodicity @default(DAILY)
  hourUtc     Int         @default(13)
  lastSentAt  DateTime?

  user User @relation(fields: [userId], references: [id])
}

// ──────────────────────────────────────────────────────────────────────────────
// Cache de cotizaciones (server-side)
// ──────────────────────────────────────────────────────────────────────────────
model QuoteCache {
  symbol        String   @id
  price         Decimal
  change        Decimal?
  changePercent Decimal?
  fetchedAt     DateTime @default(now())
}
